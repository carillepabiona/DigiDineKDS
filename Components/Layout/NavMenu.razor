@using DigiDineKDS.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IAuthService AuthService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""><i class="bi bi-sun">Good Day!</i></a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column nav-container">
        <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
            <span class="bi bi-egg-fried" aria-hidden="true"></span>
            <span>Kitchen</span>
        </NavLink>

        <!-- Other navigation links -->

        <div class="logout-container mt-auto">
            <NavLink class="nav-link d-flex align-items-center text-white" href="loggout" @onclick="ConfirmLogout">
                <span class="bi bi-box-arrow-right me-2" aria-hidden="true"></span>
                <span>Logout</span>
            </NavLink>
        </div>

        @if (ShowLogoutConfirmation)
        {
            <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                <div class="bg-white p-6 rounded shadow-lg text-center">
                    <p>Are you sure you want to logout?</p>
                    <button @onclick="Logout" class="chatbox-send-button">
                        Yes, Logout
                    </button>
                    <button @onclick="CancelLogout" class="chatbox-send-button">
                        Cancel
                    </button>
                </div>
            </div>
        }
    </nav>
</div>

@code {
    private bool _subscribed = false;

    protected override async Task OnInitializedAsync()
    {
        if (!_subscribed)
        {
            _subscribed = true;
        }
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("playPageSwitchSound");
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        AuthService.OnLoginStateChanged -= StateHasChanged;
    }

    private bool ShowLogoutConfirmation = false;

    private void ConfirmLogout()
    {
        ShowLogoutConfirmation = true;
    }

    private void Logout()
    {
        ShowLogoutConfirmation = false;
        // Redirect to the desired page
        Navigation.NavigateTo("/login");
    }

    private async void CancelLogout()
    {
        ShowLogoutConfirmation = false;
        Navigation.NavigateTo("/");
    }

    protected override void OnInitialized()
    {
        AuthService.OnLoginStateChanged += StateHasChanged;
    }
}

<style>
    .nav-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        overflow-y: hidden;
        touch-action: none;
        
    }

    .logout-container {
        padding-bottom: 100px;
        margin-top: auto;
    }
</style>
