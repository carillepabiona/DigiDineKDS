@page "/kitchen"
@inject TcpReceiverService TcpReceiver
@using DigiDineKDS.Models;
@using DigiDineKDS.Service;
@implements IDisposable
<h3 class="mb-4">👨‍🍳 KDS - Preparing Orders</h3>

@if (!preparingOrders.Any())
{
    <div class="alert alert-info">No preparing orders received yet.</div>
}
else
{
    <div class="row g-3">
        @foreach (var order in preparingOrders)
        {
            <div class="col-md-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-success text-white d-flex justify-content-between">
                        <strong>Table: @order.TableNumber</strong>
                        <span class="badge bg-light text-dark">Preparing</span>
                    </div>
                    <div class="card-body">
                        <h5>@order.Name</h5>
                        <p class="mb-1">Qty: @order.Quantity</p>
                        <p class="mb-1">Price: ₱@order.Price.ToString("F2")</p>
                        @if (!string.IsNullOrWhiteSpace(order.Note))
                        {
                            <div class="text-muted small">Note: @order.Note</div>
                        }
                        <div class="text-end small text-muted">@order.OrderedAt.ToString("g")</div>

                        <div class="mt-3 text-end">
                            <button class="btn btn-sm btn-success" @onclick="() => MarkAsDone(order)">
                                ✅ Done
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<OrderItem> preparingOrders = new();

    protected override void OnInitialized()
    {
        TcpReceiver.OnOrdersReceived += HandleIncomingOrders;
        TcpReceiver.StartListening();
    }

    private void HandleIncomingOrders(List<OrderItem> orders)
    {
        InvokeAsync(() =>
        {
            preparingOrders.AddRange(orders);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        TcpReceiver.OnOrdersReceived -= HandleIncomingOrders;
        TcpReceiver.Stop();
    }

    private void MarkAsDone(OrderItem order)
    {
        preparingOrders.Remove(order);
    }
}